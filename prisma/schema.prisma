// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  username         String?         @unique
  image            String?
  background       String?
  email            String?         @unique
  emailVerified    DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  address          String?
  instaUsername    String?
  twitterUsername  String?
  facebookUsername String?
  followIds        String[]
  followerIds      String[]
  description      String?
  invitedBy        String?
  volume           Int?
  items            Int?
  collections      Collection[]
  offersReceived   OffersReceied[]
  offersMade       OffersMade[]
  userNfts         NFT[]
}

model NFT {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  collection        Collection?     @relation(fields: [collectionId], references: [id])
  collectionId      String?         @db.ObjectId
  collectionUid     String?
  Activity          Activity[]
  nftId             Int?
  collectionAddress String?
  category          String?
  isAuctioned       Boolean?
  isOffered         Boolean?
  latestBid         Int?
  latestOffer       Int?
  auctionTimer      Int?
  likes             Int?
  User              User?           @relation(fields: [userId], references: [id])
  userId            String?         @db.ObjectId
  OffersReceied     OffersReceied[]
  OffersMade        OffersMade[]
}

model Collection {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  creator          User?      @relation(fields: [collectionId], references: [id])
  collectionId     String?    @db.ObjectId
  name             String?
  logo             String?
  background       String?
  address          String?    @unique
  instaUsername    String?
  twitterUsername  String?
  facebookUsername String?
  followIds        Int[]
  followerIds      Int[]
  volume           Int?
  items            Int?
  owners           Int?
  sold             Int?
  likes            Int?
  floorPrice       Int?
  description      String?
  categories       Category[] @relation(fields: [categoryIds], references: [id])
  categoryIds      String[]   @db.ObjectId
  NFTs             NFT[]
}

model Category {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  collections   Collection[] @relation(fields: [collectionIds], references: [id])
  collectionIds String[]     @db.ObjectId
}

model OffersReceied {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
  nft    NFT?    @relation(fields: [nFTId], references: [id])
  price  Int?
  nFTId  String? @db.ObjectId
}

model OffersMade {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
  nft    NFT?    @relation(fields: [nFTId], references: [id])
  price  Int?
  nFTId  String? @db.ObjectId
}

model Activity {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  activityType String?
  item         NFT?    @relation(fields: [nftId], references: [id])
  price        Int?
  from         String?
  fromAddress  String?
  to           String?
  toAddress    String?
  time         String?
  nftId        String? @db.ObjectId
}
